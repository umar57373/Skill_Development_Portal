extends userLayout

block content-head
  title #{playlist ? playlist.title : 'Playlist Not Found'}
  link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css")
  style.
    body { font-family: Arial, sans-serif; margin: 0; padding: 0; }
    .container { max-width: 1200px; margin: 0 auto; padding: 2.5rem 2.5rem 1.5rem; margin-top: 4rem; }
    .title { font-size: 2.25rem; font-weight: bold; margin-bottom: 0.75rem; padding-left: 1.25rem; color: #334155; }
    .flex-container { display: flex; flex-direction: column; gap: 2.5rem; }
    .video-player { flex: 1; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border: 1px solid #e5e7eb; border-radius: 0.5rem; overflow: hidden; }
    #youtube-player { width: 100%; height: 450px; background: #000; }
    .video-title { margin: 1rem 0 0.5rem; text-align: center; font-weight: 600; font-size: 1.125rem; color: #4b5563; }
    .video-list { width: 100%; max-height: 500px; overflow-y: auto; border-left: 1px solid #d1d5db; border-radius: 0.375rem; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); }
    .video-list-header { font-size: 1.5rem; font-weight: bold; padding: 1rem; background: #f3f4f6; color: #4b5563; }
    .video-item { cursor: pointer; padding: 1rem; display: flex; align-items: center; gap: 10px; }
    .video-item.active { background: #e5e7eb; font-weight: bold; }

block content-body
  if !playlist
    p.text-center.text-red-500.font-bold Playlist not found.
  else
    .container
      h1.title #{playlist.title}
      .flex-container
        .video-player
          #youtube-player
          p.video-title 
            | Lecture 1: 
            = playlist.videos && playlist.videos.length > 0 ? playlist.videos[0].title : 'Untitled'
          
        .video-list
          h2.video-list-header Playlist
          each video, index in playlist.videos
            .video-item(data-index=index)
              i.fas.fa-play-circle.play-icon(style="font-size: 24px;")
              p.font-medium.text-gray-800 Lecture #{index + 1}: #{video.title}

  script(src="https://www.youtube.com/iframe_api")
  script.
    let player;
    let selectedVideoIndex = 0;
    const playlistVideos = !{JSON.stringify(playlist ? playlist.videos : [])};

    function onYouTubeIframeAPIReady() {
      if (playlistVideos.length === 0) {
        console.warn("No videos in playlist.");
        return;
      }

      player = new YT.Player('youtube-player', {
        height: '450',
        width: '100%',
        videoId: playlistVideos[selectedVideoIndex].url,
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
    }

    function onPlayerReady(event) {
      event.target.playVideo();
    }

    function onPlayerStateChange(event) {
      if (event.data === YT.PlayerState.ENDED) {
        playNextVideo();
      }
    }

    function playNextVideo() {
      if (selectedVideoIndex < playlistVideos.length - 1) {
        selectedVideoIndex++;
        loadVideo(selectedVideoIndex);
      }
    }

    function loadVideo(index) {
      selectedVideoIndex = index;
      player.loadVideoById(playlistVideos[selectedVideoIndex].url);
      updateUI();
    }

    function updateUI() {
      document.querySelectorAll('.video-item').forEach((item, index) => {
        item.classList.toggle('active', index === selectedVideoIndex);
      });

      document.querySelector('.video-title').innerText =
        `Lecture ${selectedVideoIndex + 1}: ${playlistVideos[selectedVideoIndex].title}`;
    }

    document.addEventListener("DOMContentLoaded", function () {
      const scriptTag = document.createElement("script");
      scriptTag.src = "https://www.youtube.com/iframe_api";
      scriptTag.onload = function () {
        if (typeof YT !== "undefined" && YT.Player) {
          onYouTubeIframeAPIReady();
        } else {
          console.error("YouTube API failed to load.");
        }
      };
      document.body.appendChild(scriptTag);

      document.querySelectorAll('.video-item').forEach(item => {
        item.addEventListener('click', function () {
          const index = parseInt(this.getAttribute('data-index'));
          loadVideo(index);
        });
      });
    });
