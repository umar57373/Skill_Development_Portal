extends userLayout

block content-head
  title Quiz - Skillhub
  style.
    .quiz-container { max-width: 900px; margin: 40px auto; padding: 2rem; background-color: white; border-radius: 10px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); }
    h1 { color: #3498db; text-align: center; }
    .admin-section, .user-section { margin-top: 2rem; }
    .form-group { margin-bottom: 1rem; }
    .form-group label { display: block; font-size: 1rem; margin-bottom: 0.5rem; color: #333; }
    .form-group input { margin-right: 0.5rem; }
    .btn { background-color: #3498db; color: white; border: none; padding: 0.8rem 1.5rem; border-radius: 5px; cursor: pointer; transition: background-color 0.3s; }
    .btn:hover { background-color: #2980b9; }
    .remove-btn { background-color: #e74c3c; margin-left: 1rem; }
    .remove-btn:hover { background-color: #c0392b; }
    .quiz-list { margin-top: 1rem; }
    .quiz-item { border: 1px solid #ddd; padding: 1rem; margin-bottom: 1rem; border-radius: 5px; position: relative; }
    .quiz-item h3 { margin: 0; color: #333; }
    .quiz-item p { margin: 0.5rem 0; }
    .error { color: red; margin-bottom: 1rem; }
    .success { color: green; margin-bottom: 1rem; }
    .result { margin-top: 1rem; padding: 1rem; border-radius: 5px; background-color: #d4edda; color: #155724; }
    .hidden { display: none; }
    .timer { font-size: 1.2rem; color: #e74c3c; margin-bottom: 1rem; }
    .due-date { font-style: italic; color: #7f8c8d; }

block content-body
  .quiz-container
    h1 Quiz Section

    if user && user.role === 'admin'
      .admin-section
        h2 Upload Quiz (JSON)
        if error
          p.error #{error}
        if success
          p.success #{success}
        form#uploadQuizForm(action="/user/upload-quiz" method="POST" enctype="multipart/form-data")
          .form-group
            label(for="quizFile") Select Quiz JSON File:
            input(type="file" id="quizFile" name="quizFile" accept=".json" required)
          button(type="submit" class="btn") Upload Quiz

    .user-section
      h2 Available Quizzes
      if quizzes && quizzes.length > 0
        .quiz-list
          each quiz in quizzes
            .quiz-item(data-quiz-id=quiz._id)
              h3 #{quiz.title} (#{quiz.topic})
              - var dueDateDisplay = quiz.dueDate ? quiz.dueDate.toLocaleDateString() : 'No due date set'
              p.due-date Due Date: #{dueDateDisplay}
              - const submission = quiz.submissions.find(sub => String(sub.user) === String(user._id))
              if submission
                p.result You scored #{submission.score} out of #{quiz.questions.length}
              else if user && user.role === 'user'
                form(id=`quizForm-${quiz._id}` action=`/user/quiz/submit/${quiz._id}` method="POST")
                  - var timeLimit = 600; // 10 minutes in seconds
                  input(type="hidden" name="timeLimit" value=timeLimit)
                  .timer(id=`timer-${quiz._id}`).hidden Timer: 10:00
                  button(type="button" id=`startBtn-${quiz._id}` class="btn") Start Quiz
                  each question, qIndex in quiz.questions
                    .question(data-index=qIndex data-multiple=(question.correctAnswer.length > 1 ? 'true' : 'false') class="hidden")
                      p #{qIndex + 1}. #{question.question} #{question.correctAnswer.length > 1 ? '(Choose TWO)' : ''}
                      each option, oIndex in question.options
                        .form-group
                          label
                            if question.correctAnswer.length > 1
                              input(type="checkbox" name=`q${qIndex}` value=option)
                            else
                              input(type="radio" name=`q${qIndex}` value=option required)
                            |  #{option}
                  .navigation.hidden
                    button(type="button" class="btn prev-btn") Previous
                    button(type="button" class="btn next-btn") Next
                    button(type="submit" class="btn submit-btn hidden") Submit
              else if user && user.role === 'admin'
                each question, qIndex in quiz.questions
                  p #{qIndex + 1}. #{question.question}
                  p Options: #{question.options.join(', ')}
                  p Correct Answer: #{Array.isArray(question.correctAnswer) ? question.correctAnswer.join(', ') : question.correctAnswer}
                button(type="button" class="btn remove-btn" data-quiz-id=quiz._id onclick="removeQuiz(this)") Remove Quiz
      else
        p No quizzes available yet.

  script.
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.quiz-item').forEach(item => {
        const quizId = item.getAttribute('data-quiz-id');
        const quizForm = document.getElementById(`quizForm-${quizId}`);
        if (!quizForm) return; // Skip if no form (e.g., already submitted or admin view)
        const timerDisplay = document.getElementById(`timer-${quizId}`);
        const startBtn = document.getElementById(`startBtn-${quizId}`);
        const questions = quizForm.querySelectorAll('.question');
        const nextBtn = item.querySelector('.next-btn');
        const prevBtn = item.querySelector('.prev-btn');
        const submitBtn = item.querySelector('.submit-btn');
        const navigation = item.querySelector('.navigation');
        let currentIndex = 0;
        let timeLeft = parseInt(quizForm.querySelector('input[name="timeLimit"]').value) || 600;
        let timerInterval = null;

        function updateTimer() {
          const minutes = Math.floor(timeLeft / 60);
          const seconds = timeLeft % 60;
          timerDisplay.textContent = `Timer: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
          if (timeLeft <= 0) {
            alert('Time is up! Submitting quiz...');
            quizForm.submit();
          }
          timeLeft--;
        }

        function showQuestion(index) {
          questions.forEach((q, i) => {
            q.classList.toggle('hidden', i !== index);
          });
          prevBtn.classList.toggle('hidden', index === 0);
          nextBtn.classList.toggle('hidden', index === questions.length - 1);
          submitBtn.classList.toggle('hidden', index !== questions.length - 1);
        }

        startBtn.addEventListener('click', () => {
          startBtn.classList.add('hidden');
          timerDisplay.classList.remove('hidden');
          navigation.classList.remove('hidden');
          showQuestion(currentIndex);
          timerInterval = setInterval(updateTimer, 1000);
        });

        nextBtn.addEventListener('click', () => {
          const currentQ = questions[currentIndex];
          const isMultiple = currentQ.dataset.multiple === 'true';
          const selected = currentQ.querySelectorAll(isMultiple ? 'input[type="checkbox"]:checked' : 'input[type="radio"]:checked');
          if (selected.length === 0 || (isMultiple && selected.length < 2)) {
            alert('Please select an answer' + (isMultiple ? ' (two required)' : ''));
            return;
          }
          if (currentIndex < questions.length - 1) {
            currentIndex++;
            showQuestion(currentIndex);
          }
        });

        prevBtn.addEventListener('click', () => {
          if (currentIndex > 0) {
            currentIndex--;
            showQuestion(currentIndex);
          }
        });

        submitBtn.addEventListener('click', (e) => {
          clearInterval(timerInterval);
          let attempted = 0;
          let allAnswered = true;
          questions.forEach((q, i) => {
            const isMultiple = q.dataset.multiple === 'true';
            const selected = q.querySelectorAll(isMultiple ? 'input[type="checkbox"]:checked' : 'input[type="radio"]:checked');
            if (selected.length > 0) attempted++;
            if ((selected.length === 0 || (isMultiple && selected.length < 2)) && i >= 1) {
              allAnswered = false;
              alert(`Please answer question ${i + 1}` + (isMultiple ? ' (two required)' : ''));
            }
          });
          if (!allAnswered) {
            e.preventDefault();
          } else {
            alert(`You attempted ${attempted} out of ${questions.length} questions`);
          }
        });

        quizForm.addEventListener('submit', () => {
          clearInterval(timerInterval);
        });
      });

      window.removeQuiz = function(button) {
        const quizId = button.getAttribute('data-quiz-id');
        if (confirm('Are you sure you want to remove this quiz?')) {
          fetch(`/user/remove-quiz/${quizId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              alert('Quiz removed successfully!');
              location.reload();
            } else {
              alert(data.error);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Failed to remove quiz.');
          });
        }
      };
    });